{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name leipzig.chord, :imports nil, :requires {set clojure.set, clojure.set clojure.set, scale leipzig.scale, leipzig.scale leipzig.scale}, :uses nil, :defs {update-all {:protocol-inline nil, :meta {:file "/home/ben/src/cljs-music/resources/public/js/compiled/out/leipzig/chord.cljc", :line 5, :column 8, :end-line 5, :end-column 18, :private true, :arglists (quote ([m [k & ks] f]))}, :private true, :name leipzig.chord/update-all, :variadic false, :file "resources/public/js/compiled/out/leipzig/chord.cljc", :end-column 18, :method-params ([m p__24097 f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m [k & ks] f]))}, mapval {:protocol-inline nil, :meta {:file "/home/ben/src/cljs-music/resources/public/js/compiled/out/leipzig/chord.cljc", :line 10, :column 8, :end-line 10, :end-column 14, :private true, :arglists (quote ([m f]))}, :private true, :name leipzig.chord/mapval, :variadic false, :file "resources/public/js/compiled/out/leipzig/chord.cljc", :end-column 14, :method-params ([m f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m f]))}, root {:protocol-inline nil, :meta {:file "/home/ben/src/cljs-music/resources/public/js/compiled/out/leipzig/chord.cljc", :line 12, :column 7, :end-line 12, :end-column 11, :arglists (quote ([chord tonic])), :doc "Translates a chord so that its root is at tonic.\n  e.g. (-> triad (root 4))"}, :name leipzig.chord/root, :variadic false, :file "resources/public/js/compiled/out/leipzig/chord.cljc", :end-column 11, :method-params ([chord tonic]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([chord tonic])), :doc "Translates a chord so that its root is at tonic.\n  e.g. (-> triad (root 4))"}, triad {:name leipzig.chord/triad, :file "resources/public/js/compiled/out/leipzig/chord.cljc", :line 17, :column 1, :end-line 17, :end-column 11, :meta {:file "/home/ben/src/cljs-music/resources/public/js/compiled/out/leipzig/chord.cljc", :line 17, :column 6, :end-line 17, :end-column 11}, :doc "A three-tone chord."}, seventh {:name leipzig.chord/seventh, :file "resources/public/js/compiled/out/leipzig/chord.cljc", :line 21, :column 1, :end-line 21, :end-column 13, :meta {:file "/home/ben/src/cljs-music/resources/public/js/compiled/out/leipzig/chord.cljc", :line 21, :column 6, :end-line 21, :end-column 13}, :doc "A four-tone chord."}, ninth {:name leipzig.chord/ninth, :file "resources/public/js/compiled/out/leipzig/chord.cljc", :line 25, :column 1, :end-line 25, :end-column 11, :meta {:file "/home/ben/src/cljs-music/resources/public/js/compiled/out/leipzig/chord.cljc", :line 25, :column 6, :end-line 25, :end-column 11}, :doc "A five-tone chord."}, inversion {:protocol-inline nil, :meta {:file "/home/ben/src/cljs-music/resources/public/js/compiled/out/leipzig/chord.cljc", :line 29, :column 7, :end-line 29, :end-column 16, :arglists (quote ([chord n]))}, :name leipzig.chord/inversion, :variadic false, :file "resources/public/js/compiled/out/leipzig/chord.cljc", :end-column 16, :method-params ([chord n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists (quote ([chord n]))}, augment {:protocol-inline nil, :meta {:file "/home/ben/src/cljs-music/resources/public/js/compiled/out/leipzig/chord.cljc", :line 36, :column 7, :end-line 36, :end-column 14, :arglists (quote ([chord k n])), :doc "Adds n to key k in the chord."}, :name leipzig.chord/augment, :variadic false, :file "resources/public/js/compiled/out/leipzig/chord.cljc", :end-column 14, :method-params ([chord k n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 3, :fn-var true, :arglists (quote ([chord k n])), :doc "Adds n to key k in the chord."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:v :vii :ix :iii :i}, :order [:i :iii :v :vii :ix]}, :doc nil}